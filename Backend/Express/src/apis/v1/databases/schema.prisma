// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  out ="."
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(uuid())
  username            String            @unique @db.VarChar(225)
  password_hash       String?           @db.Text
  full_name           String            @db.VarChar(225)
  phone_number        String            @db.VarChar(225) @unique
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  created_by          String?           @db.VarChar(225)
  updated_by          String?           @db.VarChar(225)
  roles               User_role[]
  user_addresses      User_address[]
  payment_methods     Payment_method[]
  orders              Order[]
  shopping_session    Shopping_session?
} 

model Role {
  id                  String            @id @default(uuid())
  role                String            @db.VarChar(225)
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  users               User_role[]
}

model User_role {
  user                User              @relation(fields: [user_id], references: [id])
  user_id             String
  role                Role              @relation(fields: [role_id], references: [id])
  role_id             String
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  @@id([user_id,role_id])
}

model User_address {
  id                  String            @id @default(uuid())
  address_line1       String            @db.VarChar(225)
  address_line2       String?           @db.VarChar(225)
  city                String            @db.VarChar(225)
  country             String            @db.VarChar(225)
  postal_code         String            @db.VarChar(225)
  user                User              @relation(fields: [user_id], references: [id])
  user_id             String
}

enum Payment_status {
  ACTIVE
  INACTIVE
  PENDING
}

model Payment_method {
  id                  String            @id @default(uuid())
  payment_type        String            @db.VarChar(225)
  provider            String            @db.VarChar(225)
  city                String            @db.VarChar(225)
  is_default          Boolean           @db.TinyInt @default(false)
  status              Payment_status    @default(ACTIVE)
  user                User              @relation(fields: [user_id], references: [id])
  user_id             String
}

model Product {
  id                  String            @id @default(uuid())
  name                String            @db.VarChar(225) @unique
  desc                String?           @db.Text
  price               Decimal           @db.Decimal()
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  delete_at           DateTime?
  discount            Discount          @relation(fields: [discount_id], references: [id])
  discount_id         String
  product_inventory   Product_inventory?
  product_category    Product_category  @relation(fields: [category_id], references: [id])
  category_id         String
  order_items         Order_item?
  cart_item           Cart_item?
}

model Discount {
  id                  String            @id @default(uuid())
  name                String            @db.VarChar(225) @unique
  desc                String?           @db.Text
  discount_percent    Decimal           @db.Decimal()
  active              Boolean           @db.TinyInt @default(false)
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  delete_at           DateTime?
  products            Product[]
}

model Product_inventory {
  id                  String            @id @default(uuid())
  quantity            Int               
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  delete_at           DateTime?
  product             Product           @relation(fields: [product_id], references: [id])
  product_id          String            @unique
}

model Product_category {
  id                  String            @id @default(uuid())
  name                String            @db.VarChar(225) @unique
  desc                String?           @db.Text
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  delete_at           DateTime?
  parent              Product_category? @relation("Product_category",fields: [parent_id], references: [id])
  parent_id           String?
  children            Product_category[] @relation("Product_category")
  products            Product[]
}

enum Order_status {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

model Order {
  id                  String            @id @default(uuid())
  total               Decimal           @db.Decimal()
  order_status        Order_status      @default(PENDING)
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  delete_at           DateTime?
  user                User              @relation(fields: [user_id], references: [id])
  user_id             String
  payments            Payment[]
  order_items         Order_item[]
}

model Payment {
  id                  String            @id @default(uuid())
  amount              Decimal           @db.Decimal()
  payment_status      Boolean           @db.TinyInt @default(false)
  payment_date        DateTime          @default(now())
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  order               Order             @relation(fields: [order_id], references: [id])
  order_id            String
}

model Order_item {
  id                  String            @id @default(uuid())
  quantity            Decimal           @db.Decimal()
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  order               Order             @relation(fields: [order_id], references: [id])
  order_id            String
  product             Product           @relation(fields: [product_id], references: [id])
  product_id          String            @unique
}

model Shopping_session {
  id                  String            @id @default(uuid())
  total               Decimal           @db.Decimal()
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  user                User              @relation(fields: [user_id], references: [id])
  user_id             String            @unique
  cart_items          Cart_item[]
}

model Cart_item {
  id                  String            @id @default(uuid())
  quantity            Int
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  shopping_session    Shopping_session  @relation(fields: [shopping_session_id], references: [id])
  shopping_session_id String
  product             Product           @relation(fields: [product_id], references: [id])
  product_id          String            @unique
}